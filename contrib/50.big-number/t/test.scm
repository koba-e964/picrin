(import (scheme base)
        (picrin test)
        (picrin big-number)
        (srfi 27))


; ->number
(test 192.0 (bigint->number (bigint-asl (make-bigint "12") 4)))
(test 384.0 (bigint->number (bigint-asl (make-bigint "3") 7)))

; underlying
(test #(2582) (bigint-underlying (make-bigint "2582")))


; addition
(define-syntax test-add
  (syntax-rules ()
    ((_ a b ab)
      (test #t (bigint-equal? (make-bigint ab) (bigint-add (make-bigint a) (make-bigint b)))))))
(test-add "215127315" "2385236125" "2600363440")
(test-add
  "6749346968279885792917645501676082665015680331686594141390629938583418409197715730606872803686797073"
   "153356901154961362321023710551178358916519555137945588510996804230108640808767023357542838211543493"
  "6902703869434847155238669212227261023932199886824539729901626742813527050006482753964415641898340566")
(test-add "4" "-2" "2")

(define-syntax test-add!
  (syntax-rules ()
    ((_ a b ab)
      (let ((x (make-bigint a)))
        (bigint-add! x (make-bigint b))
        (test #t (bigint-equal? (make-bigint ab) x))))))

;(test-add! "215127315" "2385236125" "2600363440")
;(test-add!
;  "6749346968279885792917645501676082665015680331686594141390629938583418409197715730606872803686797073"
;   "153356901154961362321023710551178358916519555137945588510996804230108640808767023357542838211543493"
;  "6902703869434847155238669212227261023932199886824539729901626742813527050006482753964415641898340566")
;(test-add! "4" "-2" "2")

; subtraction
(define-syntax test-sub
  (syntax-rules ()
    ((_ a b ab)
      (test #t (bigint-equal? (make-bigint ab) (bigint-sub (make-bigint a) (make-bigint b)))))))
(test-sub "215127315" "-2385236125" "2600363440")
(test-sub
  "6749346968279885792917645501676082665015680331686594141390629938583418409197715730606872803686797073"
  "-153356901154961362321023710551178358916519555137945588510996804230108640808767023357542838211543493"
  "6902703869434847155238669212227261023932199886824539729901626742813527050006482753964415641898340566")
(test-sub "4" "2" "2")
(test-sub "10" "20" "-10")

(define-syntax test-sub!
  (syntax-rules ()
    ((_ a b ab)
      (let ((x (make-bigint a)))
        (bigint-sub! x (make-bigint b))
        (test #t (bigint-equal? (make-bigint ab) x))))))

;(test-sub! "215127315" "-2385236125" "2600363440")
;(test-sub!
;  "6749346968279885792917645501676082665015680331686594141390629938583418409197715730606872803686797073"
;  "-153356901154961362321023710551178358916519555137945588510996804230108640808767023357542838211543493"
;  "6902703869434847155238669212227261023932199886824539729901626742813527050006482753964415641898340566")
;(test-sub! "4" "2" "2")
;(test-sub! "10" "20" "-10")


; multiplication

(define-syntax test-mul
  (syntax-rules ()
    ((_ a b ab)
      (test #t (bigint-equal? (make-bigint ab) (bigint-mul (make-bigint a) (make-bigint b)))))))
(test-mul "15267" "41446" "632756082")
(test-mul "17568913159" "72371657891659178645" "1271491372671417140039272289555")
(test-mul "0" "0" "0")

(test #t
  (bigint-equal? (make-bigint "18446744065119617025")
    (let ((ff32 (make-bigint "4294967295")))
    (bigint-mul ff32 ff32))))

(define-syntax test-mul!
  (syntax-rules ()
    ((_ a b ab)
      (let ((x (make-bigint a)))
        (bigint-mul! x (make-bigint b))
        (test #t (bigint-equal? (make-bigint ab) x))))))

;(test-mul! "15267" "41446" "632756082")
;(test-mul! "17568913159" "72371657891659178645" "1271491372671417140039272289555")

; division
(define-syntax test-div
  (syntax-rules ()
    ((_ a b ab)
      (test #t (bigint-equal? (make-bigint ab) (bigint-div (make-bigint a) (make-bigint b)))))))
(define-syntax test-rem
  (syntax-rules ()
    ((_ a b ab)
      (test #t (bigint-equal? (make-bigint ab) (bigint-rem (make-bigint a) (make-bigint b)))))))


(test-div "2" "4" "0")
(test-div "11" "-5" "-2")
(test-div "42949672950" "10" "4294967295")
(test-div "632756082" "41446" "15267")
(test-div "1271491372671417140039272289555" "17568913159" "72371657891659178645")

(test-rem "11" "-5" "1")
(test-rem "-11" "-5" "-1")

; equality
(define-syntax test-equal?
  (syntax-rules ()
    ((_ a b)
      (test (equal? a b)
        (bigint-equal? (make-bigint a) (make-bigint b))))))

(test-equal? "12345" "12345")
(test-equal? "1" "4294967297")

; less
(define-syntax test-less?
  (syntax-rules ()
    ((_ a b ab)
      (test ab
        (bigint-less? (make-bigint a) (make-bigint b))))))
(test-less? "12" "11" #f)
(test-less? "-12" "-11" #t)
(test-less? "-0" "0" #f)
(test-less? "1" "4294967297" #t)
(test-less? "-2" "0" #t)


; bigint->string
(define-syntax test-string
  (syntax-rules ()
    ((_ a)
      (test a
        (bigint->string (make-bigint a))))))

(test-string "0")
(test-string "23525")
(test-string "4294967296")
(test-string "-4294967296")
(test-string "314159265358979323846264338327950288419716939937510582097494459230781640628620899")

; bigint->string with different radixes

(define-syntax test-string-radix
  (syntax-rules ()
    ((_ a r)
      (test a
        (bigint->string (make-bigint-radix a r) r)))))

(test-string-radix "23525" 14)
(test-string-radix "4294967296" 32)
(test-string-radix "-4294967296" 21)
(test-string-radix "314159265358979323846264338327950288419716939937510582097494459230781640628620899" 11)
(test-string-radix "aquickbrownfoxjumpsoverthelazydog" 36)

; factorial

(define (fact-big n)
  (let loop ((acc (make-bigint 1)) (m n))
    (if (= m 0) acc
      (loop (bigint-mul acc m) (- m 1)))))

(test #t
  (bigint-equal? 3628800 (fact-big 10)))

(test #t
      (bigint-equal? (make-bigint "93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000")
		     (fact-big 100)))

; power

(define-syntax test-pow
  (syntax-rules ()
    ((_ a b ab)
      (let ((x (make-bigint a)))
        (test #t (bigint-equal?
		  (make-bigint ab)
		  (bigint-pow x (make-bigint b))))))))

(test-pow "2" "3" "8")
(test-pow 2 -1 1)

(test-pow 2 120 "1329227995784915872903807060280344576")
(test-pow 5 40 "9094947017729282379150390625")

; RSA Challenge

(define rsa576 (make-bigint "188198812920607963838697239461650439807163563379417382700763356422988859715234665485319060606504743045317388011303396716199692321205734031879550656996221305168759307650257059"))

(bigint-add rsa576 rsa576)

;(test "188198812920607963838697239461650439807163563379417382700763356422988859715234665485319060606504743045317388011303396716199692321205734031879550656996221305168759307650257059" (bigint->string rsa576))

(test "c2cbb24fdbf923b61268e3f11a3896de4574b3ba58730cbd652938864e2223eeeb704a17cfd08d16b46891a61474759939c6e49aafe7f2595548c74c1d7fb8d24cd15cb23b4cd0a3" (bigint->string rsa576 16)) ;; It's important not to get into segfault
(test "188198812920607963838697239461650439807163563379417382700763356422988859715234665485319060606504743045317388011303396716199692321205734031879550656996221305168759307650257059" (bigint->string rsa576))
(test "c2cbb24fdbf923b61268e3f11a3896de4574b3ba58730cbd652938864e2223eeeb704a17cfd08d16b46891a61474759939c6e49aafe7f2595548c74c1d7fb8d24cd15cb23b4cd0a3" (bigint->string rsa576 16)) ;; It's important not to get into segfault

;; powmod
(define kyopuro-prime (make-bigint 1000000007))
(test "1" (bigint->string (bigint-pow-mod 2 (bigint-sub kyopuro-prime 1) kyopuro-prime)))

(test "2104380609" (bigint->string (bigint-pow-mod 161 1742 (make-bigint "4294967296"))))
(test "1678565217" (bigint->string (bigint-pow-mod (make-bigint "4251759185") 1742 (make-bigint "4294967296"))))

;; rand
(test #t (bigint-less? (bigint-rand (make-bigint "4294967296")) (make-bigint "4294967296")))
(test #t (bigint-equal? (bigint-rand 0) 0))

;; prime?

(test #t (bigint-prime? 107))
(test #t (bigint-prime? 107))
(test #t (bigint-prime? 107))
(test #f (bigint-prime? 561))
(test #f (bigint-prime? 2047))
(test #t (bigint-prime? kyopuro-prime))
(test #t (bigint-prime? (make-bigint "4294967311")))
;; RSA Challenge

(define rsa768-factor1 (make-bigint "33478071698956898786044169848212690817704794983713768568912431388982883793878002287614711652531743087737814467999489"))
(define rsa768-factor2 (make-bigint "36746043666799590428244633799627952632279158164343087642676032283815739666511279233373417143396810270092798736308917"))

(define rsa2048 (make-bigint "25195908475657893494027183240048398571429282126204032027777137836043662020707595556264018525880784406918290641249515082189298559149176184502808489120072844992687392807287776735971418347270261896375014971824691165077613379859095700097330459748808428401797429100642458691817195118746121515172654632282216869987549182422433637259085141865462043576798423387184774447920739934236584823824281198163815010674810451660377306056201619676256133844143603833904414952634432190114657544454178424020924616515723350778707749817125772467962926386356373289912154831438167899885040445364023527381951378636564391212010397122822120720357"))

(define prime-2048 (make-bigint "32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389437335543602135433229604645318478604952148193555853611059596231637"))

(test #f (bigint-prime? rsa576))
(test #t (bigint-prime? rsa768-factor1))
(test #t (bigint-prime? rsa768-factor2))
(test #f (bigint-prime? rsa2048))
(test #t (bigint-prime? prime-2048))
